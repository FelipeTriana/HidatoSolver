
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Ventana extends javax.swing.JFrame {

    JTextField[][] matrizCajas;
    JTextField caja;
    int tamX = 0;
    int tamY = 0;
    final int TABLEROX = 500;
    final int TABLEROY = 500;
    static int f, c;
    private FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo de Imagen", "jpg");
    private JFileChooser fileChooser = new JFileChooser();
    long tiempoInicio, tiempoFinal;
    static double tiempoCompilacion;
    
    public Ventana() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Hidato");
        setSize(477, 500);
        getContentPane().setBackground(Color.cyan.darker());
        jButton2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(0, 51, 51));
        jLabel1.setFont(new java.awt.Font("Jokerman", 3, 14)); // NOI18N
        jLabel1.setText("Hidato Solver");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 242, Short.MAX_VALUE)
        );

        jButton1.setText("Cargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Resolver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Captura");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(jLabel1)
                .addContainerGap(144, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButton1)
                .addGap(48, 48, 48)
                .addComponent(jButton2)
                .addGap(34, 34, 34)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton2.setEnabled(true);
        Start.stringToMatriz();
   
        f = Start.x + 2;
        c = Start.y + 2;

        matrizCajas = new JTextField[f][c];
        jPanel1.setLayout(new GridLayout(f, c));
        
        obtenerTamañoCajas(f, c);
        int primero = 1;
        int ultimo = Start.x * Start.y;

        for (int i = 0; i < f; i++) {
            for (int j = 0; j < c; j++) {
                caja = new JTextField();
                
                caja.setToolTipText(Integer.toString(i - 1) + "," + Integer.toString(j - 1));

                if (Start.tablero[i][j] == -1) {
                    caja.setVisible(false);
                }
                if (Start.tablero[i][j] == 0) {
                    caja.setText("");
                } else {
                    if (Start.tablero[i][j] == primero || Start.tablero[i][j] == ultimo) {
                        caja.setBackground(Color.red);
                    } else {
                        caja.setBackground(Color.CYAN);
                    }
                    caja.setText(Integer.toString(Start.tablero[i][j]));
                }

                matrizCajas[i][j] = caja;
                jPanel1.add(matrizCajas[i][j]);
                dibujarTablero();
            }
        }
      jButton1.setEnabled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton1.setEnabled(false);
        jPanel1.removeAll(); //Se remueven los elementos que habian anteriormente en el panel para no sobreescribir sobre estos
        tiempoInicio = System.currentTimeMillis();//Se calcula el tiempo inicial       
        Start.zolucion(Start.start[0], Start.start[1], 1, 0); 
        tiempoFinal = System.currentTimeMillis();
        tiempoCompilacion = (tiempoFinal-tiempoInicio);
        Start.tieneSolucion();
        f = Start.x + 2; //Obtenemos tamaños de la matriz "Tablero"
        c = Start.y + 2;
        int primero = 1; 
        int ultimo = Start.x * Start.y;

        matrizCajas = new JTextField[f][c]; //Instanciamos la creacion de una nueva matriz donde se albergaran JTextFields
        jPanel1.setLayout(new GridLayout(f, c)); //Calculamos tamaño del panel que albergara la matriz de JTextFields
        obtenerTamañoCajas(f, c); //Calculamos el tamaño que tendran los JTextField respecto al tamaño de la matriz de JTextField

        
        //Recorrido y llenado de la matriz de JTextField que se encuentra en el jPanel1
        for (int i = 0; i < f; i++) { 
            for (int j = 0; j < c; j++) {
                caja = new JTextField(); //Instanciamos creacion de un objeto JTextField que albergara el dato en las posiciones I y J de la matriz tablero
                caja.setToolTipText(Integer.toString(i - 1) + "," + Integer.toString(j - 1)); //Metodo para conocer la posicion en la que se encuentra determinado JTextField
               
                //Clasificacion de lo que podria haber en la matriz tablero
                if (Start.tablero[i][j] == -1) { //No mostramos las JTextField en donde el elemento del tablero en esa posicion es igual a -1
                    caja.setVisible(false);
                }
                if (Start.tablero[i][j] == 0) { //Los campos son vacios si el elemento en la posicion de ese tablero es igual a cero
                    caja.setText("");
                } else { //Si el elemento en esa posicion de la matriz tablero es igual a un numero es por que es pista, hay que mostrarlo 

                    for (int k = 0; k < Start.tripleta.length; k++) {
                        if (Start.tablero[i][j] == Start.tripleta[k].getValor()) {
                            caja.setBackground(Color.CYAN);
                        }
                        if (Start.tablero[i][j] == primero || Start.tablero[i][j] == ultimo) {
                            caja.setBackground(Color.red);
                        }

                    }

                    caja.setText(Integer.toString(Start.tablero[i][j]));
                    LeerArchivo.registrarTripleta();
                }

                matrizCajas[i][j] = caja;
                jPanel1.add(matrizCajas[i][j]);
                dibujarTablero();
            }
        }
   jButton2.setEnabled(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Guardar_Foto();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    private void obtenerTamañoCajas(int cantX, int cantY) {
        tamX = TABLEROX / cantX; //Tamaño de los JTextField de la Matriz que varia segun las filas y columnas de esta
        tamY = TABLEROY / cantY;
    }

    private void dibujarTablero() {
        jPanel1.validate(); //Se validan los componentes en el panel(tablero)
        jPanel1.repaint();  //Se redibuja el panel
    }

    public void guardar_imagen(String f) {
        BufferedImage imagen = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_ARGB);
        jPanel1.paint(imagen.getGraphics()); //Aqui creamos una imagen del jPanel(Matriz donde tenemos en Hidato)
        try {                                //Posteriormente se controlan las respectivas excepciones
            ImageIO.write(imagen, "png", new File(f));
            JOptionPane.showMessageDialog(null, "Tu hidato ha sido guardado");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error: no se pudo guardar la imagen");
        }
    }
    
        public void Guardar_Foto() {//Con Guardar_Foto() lo que hacemos basicamente es usar la clase fileChooser para desplegar una ventana 
        String file = null;     //que nos permitira guardar una imagen previamente creada
        fileChooser = new JFileChooser();
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile().toString();
            guardar_imagen(file + ".png");
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
